---
layout: post
title:  "负载均衡"
date:   2020-3-6 08:14:12 +0800
categories: 技术 
---

## 引言
近期review系统的架构，对负载均衡深入了解了下， 总结如下。

负载均衡策略大致分成两种， 一个是静态的负载均衡，一种是动态的负载均衡

### 静态负载均衡策略。

对于静态的负载均衡， 互联网上又大致如下几种。
1. 轮询
2. 比例
3. 优先权

比例，我个人理解为加权的轮询。  优先权，可以认为是主备。
在我实际接触的负载均衡策略中，大致可以总结如下：
1. 轮询  
轮询是最基础的分配方式，假设又n个计算资源， 则依次进行分配。 同时轮询可以用于进程内部，比如tick，在同一tick处理一个超长时间的任务（比如处理在线玩家的定时任务等）可能会导致cpu占有率激增，同时其他的任务会收到阻碍。可以将这个任务， 分散到较长时间内，每个时间片单独的处理一部分任务。
2. 加权轮询  
加权轮询就是在轮询的基础上， 为每个机器分配一个承载的权重。根据承载权重，依次分配。
3. 平滑加权轮询  
该方法，是为了解决加权权重方法突然分配不均的情况。假设3台机器的权重分别是5， 1， 1.  加权轮询的话，就会对第一台机器分配5个任务， 再对其他机器进行分配，然后循环往复。这样导致第一台机器的任务会在同一时间激增。平滑轮询呢， 保证了分配更为均匀。对这个方法感兴趣的读者可以自行搜索
5. id hash  
根据用户id，或者任务id，取模或者取hash，然后对其进行分配。这个方法对id产生规则有所要求。
4. 随机  
随机分配是不太常见的一种方式， 但是分配效果在实际使用过程中表现最优。缺点是， 不太容易追踪问题。


### 动态负载均衡策略

动态负载均衡，一般会选定一个负载指标作为负载调度的策略。 常见的调度指标有
1. 连接数
2. 服务质量（响应时间）
3. 动态性能分配
....

以我们项目的实践，连接层大多采用连接数。 单局服务，也采用了剩余可承载玩家数来进行调度。

动态性能指标的方法（cpu）可能会造成一定的干扰。最终没有采用。 但可以作为故障检测但手段，如果较长时间cpu过高，可以将该节点进行排除。

### 总结
综上， 项目可以根据自己实际需要采用合适的负载均衡策略
* 连接层可以使用连接数做动态负载均衡
* 资源长时占用性业务，可以对剩余可用资源做动态负载均衡
* 响应型有状态服务，可以通过id来做静态负载均衡
* 响应型无状态服务，可以考虑id来做静态负载均衡，或者随机分配做负载均衡

